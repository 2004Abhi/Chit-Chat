[{"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\addAIData\\page.tsx":"1","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\api\\apiCall.ts":"2","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\api\\serverUrl.ts":"3","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\Components\\Logout.tsx":"4","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\Components\\metadata.tsx":"5","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\Components\\Navbar.tsx":"6","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\Components\\Prompt.tsx":"7","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\Components\\ToastProvider.tsx":"8","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\dashboard\\AiModel.tsx":"9","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\dashboard\\OrgTemp.tsx":"10","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\dashboard\\page.tsx":"11","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\layout.tsx":"12","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\login\\page.tsx":"13","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\organization\\page.tsx":"14","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\page.tsx":"15","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\robots.ts":"16","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\sign-up\\page.tsx":"17","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\sitemap.ts":"18","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\trychatbot\\ChatBotComponent.tsx":"19","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\trychatbot\\Docs\\DocsModal.tsx":"20","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\trychatbot\\page.tsx":"21"},{"size":10031,"mtime":1704639602728,"results":"22","hashOfConfig":"23"},{"size":1490,"mtime":1704637832849,"results":"24","hashOfConfig":"23"},{"size":264,"mtime":1704640284336,"results":"25","hashOfConfig":"23"},{"size":504,"mtime":1704639165144,"results":"26","hashOfConfig":"23"},{"size":1321,"mtime":1699691610337,"results":"27","hashOfConfig":"23"},{"size":2338,"mtime":1699611932610,"results":"28","hashOfConfig":"23"},{"size":584,"mtime":1697057319924,"results":"29","hashOfConfig":"23"},{"size":280,"mtime":1696774339052,"results":"30","hashOfConfig":"23"},{"size":5008,"mtime":1699606387750,"results":"31","hashOfConfig":"23"},{"size":1057,"mtime":1699608911697,"results":"32","hashOfConfig":"23"},{"size":4859,"mtime":1704640861457,"results":"33","hashOfConfig":"23"},{"size":654,"mtime":1700449217603,"results":"34","hashOfConfig":"23"},{"size":3898,"mtime":1704636959978,"results":"35","hashOfConfig":"23"},{"size":5069,"mtime":1704639895439,"results":"36","hashOfConfig":"23"},{"size":1197,"mtime":1699613749821,"results":"37","hashOfConfig":"23"},{"size":263,"mtime":1700316611687,"results":"38","hashOfConfig":"23"},{"size":4286,"mtime":1704639325223,"results":"39","hashOfConfig":"23"},{"size":870,"mtime":1698399747195,"results":"40","hashOfConfig":"23"},{"size":8065,"mtime":1701080408292,"results":"41","hashOfConfig":"23"},{"size":6499,"mtime":1699611354969,"results":"42","hashOfConfig":"23"},{"size":5963,"mtime":1699614235684,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"1ctyqbd",{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\addAIData\\page.tsx",["109"],[],"\"use client\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Navbar from \"../Components/Navbar\";\r\nimport { getOrganizationById } from \"../api/apiCall\";\r\nimport axios from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useRouter } from 'next/navigation';\r\nimport { AiOutlineLoading3Quarters } from \"react-icons/ai\";\r\nimport Prompt from \"../Components/Prompt\";\r\nimport Cookies from \"js-cookie\";\r\nimport { serverUrl } from \"../api/serverUrl\";\r\n\r\n\r\nconst urls = serverUrl({Production : true})\r\n\r\ntype AiModel = {\r\n  organization: {\r\n    userId:string|any;\r\n    organizationName: string;\r\n  };\r\n  url: string;\r\n  openAIApi:string;\r\n};\r\nconst AddAiModel = () => {\r\n  const router = useRouter();\r\n  let UserId: string | null;\r\n  UserId = localStorage.getItem('UserId')\r\n  const [isLoading, setisLoading] = useState(false);\r\n  const [selectedOrganization, setSelectedOrganization] = useState<string>(\"\");\r\n  const [orgData, setOrgData] = useState<any[]>([]);\r\n  const [File, setFile] = useState<File | null>(null);\r\n  const [url, setUrl] = useState<string>(\"\");\r\n  const [openAIApi, setOpenAIApi] = useState<string>(\"\");\r\n\r\n  const [AiModel, setAiModel] = useState<AiModel>({\r\n    organization: {\r\n      userId:\"\",\r\n      organizationName: \"\",\r\n    },\r\n    url: \"\",\r\n    openAIApi:\"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function fetchData() {\r\n      const result = await getOrganizationById(UserId);\r\n      if (result && result.response && result.response.data) {\r\n        setOrgData(result.response.data);\r\n      }\r\n    }\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const selectedFile = e.target.files?.item(0);\r\n    if (selectedFile && selectedFile.type === 'text/plain' || \"application/pdf\" || \"text/csv\") {\r\n      const file = e.target.files?.item(0);\r\n      if (file) {\r\n        setFile(file);\r\n      }\r\n    }\r\n    else{\r\n      toast.error(\"Only txt, pdf or csv files are allowed!\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const isValidOpenAIApi = (key: string): boolean => {\r\n    return key.startsWith(\"sk-\") && key.length > 50;\r\n  };\r\n\r\n  const handleOpenAIApiChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const enteredApi = e.target.value;\r\n    if (!isValidOpenAIApi(enteredApi)) {\r\n      toast.error(\"Invalid OpenAI API Key\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n      return;\r\n    }\r\n    setOpenAIApi(enteredApi);\r\n};\r\n\r\n  useEffect(() => {\r\n    // Update AiModel when selectedOrganization or url changes\r\n    setAiModel({\r\n      organization: {\r\n        organizationName: selectedOrganization,\r\n        userId: UserId\r\n      },\r\n      url: url,\r\n      openAIApi: openAIApi\r\n    });\r\n  }, [selectedOrganization, url, UserId, openAIApi]);\r\n\r\n  const fetchFile = async () => {\r\n    if (!File) {\r\n      toast.error(\"No file selected\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", File);\r\n\r\n    try {\r\n      const res = await axios.post(\r\n        urls + \"/api/v1/upload\",\r\n        formData\r\n      );\r\n      toast(\"Successfully, Submitted !\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n      setUrl(res.data.data.url);\r\n      return true;\r\n    } catch (err) {\r\n      toast.error(\"oops someting went wrong !\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const SubmitAiModel = async () => {\r\n    const res = await axios.post(\r\n      urls + \"/api/v1/addAiTrainingModel\",\r\n      AiModel\r\n    );\r\n  };\r\n  console.log(AiModel)\r\n\r\n  const handleFileSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    const success = await fetchFile();\r\n    if (success) {\r\n      toast(\"File Submmited !\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n    } else {\r\n      toast.error(\"File not Submitted !\", {\r\n        position: \"top-right\",\r\n        autoClose: 5000,\r\n        hideProgressBar: false,\r\n        closeOnClick: true,\r\n        pauseOnHover: true,\r\n        draggable: true,\r\n        progress: undefined,\r\n        theme: \"light\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    e.preventDefault();\r\n    setisLoading(true)\r\n    await SubmitAiModel()\r\n      .then((res) => {\r\n        toast(\"Ai Model Created !\", {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          theme: \"light\",\r\n        });\r\n        console.log(res)\r\n        router.push('/dashboard')\r\n      })\r\n      .catch((err) => {\r\n        toast.error(\"Failed Training\", {\r\n          position: \"top-right\",\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n          theme: \"light\",\r\n        });\r\n        console.log(err);\r\n      });\r\n      setisLoading(false)\r\n  };\r\n  const isFormFilled = Boolean(File) && Boolean(selectedOrganization) && Boolean(openAIApi);\r\n  return (\r\n    <>\r\n        <Navbar />\r\n        {\r\n          UserId?(\r\n            isLoading?(\r\n              <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 text-white z-20\">\r\n              <AiOutlineLoading3Quarters className=\"animate-spin text-6xl\" />\r\n              </div>\r\n            ):(\r\n              <div className=\"sm:pt-24 pt-44 top-0 left-0 w-full h-full flex items-center justify-center bg-opacity-50\">\r\n              <div className=\"p-8 bg-white rounded-lg shadow-xl w-96 bg-opacity-10\">\r\n                <h2 className=\"text-xl mb-4 font-bold\">Train Data</h2>\r\n    \r\n                <form>\r\n                  {/* File Upload */}\r\n                  <label className=\"block text-sm font-medium mb-2\">\r\n                    Upload File:\r\n                  </label>\r\n                  <input\r\n                    onChange={handleFileChange}\r\n                    type=\"file\"\r\n                    accept=\".txt, .pdf, .csv\"\r\n                    className=\"mb-4 p-2 file:bg-pink-300 file:rounded-xl file:active:bg-pink-400 file:shadow-lg file:border-pink-600\"\r\n                  />\r\n                  <button\r\n                    onClick={handleFileSubmit}\r\n                    className=\"bg-pink-700 active:bg-pink-500 text-white px-4 py-2 rounded hover:bg-pink-600\"\r\n                  >\r\n                    Add File\r\n                  </button>\r\n                  {/* Organization Selection */}\r\n                  <label className=\"block text-sm font-medium mb-2\">\r\n                    Select Organization:\r\n                  </label>\r\n                  <select\r\n                    value={selectedOrganization}\r\n                    onChange={(e: React.ChangeEvent<HTMLSelectElement>) =>\r\n                      setSelectedOrganization(e.target.value)\r\n                    }\r\n                    className=\"mb-4 border p-2 rounded w-full bg-pink-200\"\r\n                  >\r\n                    <option disabled value=\"\">\r\n                      -- Select Organization --\r\n                    </option>\r\n                    {orgData &&\r\n                      orgData.map(\r\n                        (\r\n                          value: { OrganizationName: string },\r\n                          index: React.Key | null | undefined\r\n                        ) => (\r\n                          <option key={index} value={value.OrganizationName}>\r\n                            {value.OrganizationName}\r\n                          </option>\r\n                        )\r\n                      )}\r\n                  </select>\r\n                  <div className=\"mb-4\">\r\n              <label className=\"block text-sm font-medium mb-2\">OpenAi ApiKey</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"openAIApi\"\r\n                required\r\n                onChange={handleOpenAIApiChange}\r\n                className=\"mt-1 w-full px-4 py-2 rounded-md border bg-opacity-50 bg-pink-50 border-gray-300 focus:outline-none focus:border-indigo-500\"\r\n              />\r\n            </div>\r\n                  <button\r\n                    type=\"submit\"\r\n                    onClick={handleSubmit}\r\n                    className={`bg-pink-700 active:bg-pink-500 text-white px-4 py-2 rounded hover:bg-pink-600 ${\r\n                      !isFormFilled && \"opacity-50 cursor-not-allowed\"\r\n                    }`}\r\n                    disabled={!isFormFilled}\r\n                  >Submit\r\n                  </button>\r\n                </form>\r\n              </div>\r\n            </div>\r\n            )\r\n          ):(\r\n            <Prompt/>\r\n          )\r\n        }\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddAiModel;\r\n","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\api\\apiCall.ts",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\api\\serverUrl.ts",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\Components\\Logout.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\Components\\metadata.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\Components\\Navbar.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\Components\\Prompt.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\Components\\ToastProvider.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\dashboard\\AiModel.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\dashboard\\OrgTemp.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\dashboard\\page.tsx",["110","111"],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\layout.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\login\\page.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\organization\\page.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\page.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\robots.ts",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\sign-up\\page.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\sitemap.ts",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\trychatbot\\ChatBotComponent.tsx",["112","113","114","115"],[],"\"use client\";\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { ImCancelCircle } from \"react-icons/im\";\r\nimport { serverUrl } from \"../api/serverUrl\";\r\n\r\nconst url = serverUrl({Production: true})\r\ninterface ChatBotProps {\r\n  initialMessage?: string;\r\n  chatbotTitle?: string;\r\n  brandImage?: string;\r\n  apiKey: string;\r\n  switchAPI?: boolean;\r\n  suggestions?: string[];\r\n  rateLimitDuration?: number\r\n}\r\n\r\nconst ChatBotComponent: React.FC<ChatBotProps> = ({\r\n  initialMessage = \"Hello! How Can I Assist You ?\",\r\n  chatbotTitle = \"Chat bot\",\r\n  brandImage = \"https://www.kindpng.com/picc/m/179-1798038_chatbots-builder-pricing-crozdesk-free-chatbot-hd-png.png\",\r\n  apiKey,\r\n  switchAPI = false,\r\n  suggestions=[],\r\n  rateLimitDuration = 5000\r\n}) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [messages, setMessages] = useState<any[]>([]);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n  const [isBotTyping, setIsBotTyping] = useState(false);\r\n  const inputRef = useRef<HTMLInputElement | null>(null);\r\n  const messagesEndRef = useRef<HTMLDivElement | null>(null);\r\n  const [rateLimited, setRateLimited] = useState(false);\r\n  const [suggest, setSuggestions] = useState<string[]>(suggestions);\r\n\r\n  const handleSuggestionClick = (suggestion: string) => {\r\n    setInputValue(suggestion);\r\n    sendMessage();\r\n    setSuggestions([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (initialMessage) {\r\n      setMessages([{ type: \"bot\", text: initialMessage }]);\r\n    }\r\n  }, [initialMessage]);\r\n\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      inputRef.current?.focus();\r\n    }\r\n  }, [isOpen]);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    setSuggestions(suggestions);\r\n  }, [suggestions]);\r\n  \r\n\r\n  async function generateAnswers(userQuestion: string) {\r\n    try {\r\n      let chatAPIUrl = url + `/api/v1/QnARetrieval?key=${apiKey}`;\r\n\r\n      if (switchAPI) {\r\n        chatAPIUrl = `https://your-hosted-domain/api/v1/organization/generateCompletion?key=${apiKey}`;\r\n      }\r\n\r\n      const payloadBody = {\r\n        prompt: userQuestion,\r\n      };\r\n\r\n      const response = await fetch(chatAPIUrl, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(payloadBody),\r\n      });\r\n\r\n      const jsonData = await response.json();\r\n\r\n      setMessages((prev) => [...prev, { type: \"bot\", text: jsonData.message }]);\r\n      setIsBotTyping(false);\r\n    } catch (e) {\r\n      console.error(e);\r\n      setMessages((prev) => [\r\n        ...prev,\r\n        { type: \"bot\", text: \"OOPs! something went wrong\" },\r\n      ]);\r\n      setIsBotTyping(false);\r\n    }\r\n  }\r\n\r\n  const sendMessage = () => {\r\n    if (inputValue.trim() && !rateLimited) {\r\n      const userMessage = {\r\n        type: \"user\",\r\n        text: inputValue,\r\n      };\r\n\r\n      setMessages((prev) => [...prev, userMessage]);\r\n      setInputValue(\"\");\r\n      setIsBotTyping(true);\r\n      setSuggestions([]); // clear the suggestions when user sends a message\r\n\r\n      generateAnswers(inputValue);\r\n      setRateLimited(true);\r\n      setTimeout(() => setRateLimited(false), rateLimitDuration);\r\n    }\r\n  };\r\n\r\n  const handleEnterPress = (e: React.KeyboardEvent) => {\r\n    if (e.key === \"Enter\" && !e.shiftKey) {\r\n      e.preventDefault();\r\n      sendMessage();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed bottom-10 right-10\">\r\n      {isOpen ? (\r\n        <div className=\"w-80 h-96 border p-4 bg-white rounded-lg flex flex-col shadow-lg\">\r\n          <div className=\"mb-4 font-bold flex justify-between items-center text-black p-2 rounded-t-lg\">\r\n            <div className=\"flex items-center\">\r\n              <img\r\n                src={brandImage}\r\n                alt=\"brand\"\r\n                className=\"w-6 h-6 rounded-full object-cover mr-2\"\r\n              />\r\n              <span>{chatbotTitle}</span>\r\n            </div>\r\n            <button onClick={() => setIsOpen(false)}>\r\n              <ImCancelCircle />\r\n            </button>\r\n          </div>\r\n          <div className=\"flex-1 overflow-y-auto mb-4\">\r\n            {messages.map((msg, index) => (\r\n              // ... (rest of the code)\r\n              <div\r\n                key={index}\r\n                className={`p-2 my-2 ${msg.type === \"user\" ? \"ml-auto\" : \"\"}`}\r\n              >\r\n                {msg.type === \"bot\" && (\r\n                  <div className=\"flex items-center\">\r\n                    <img\r\n                      src={brandImage}\r\n                      alt=\"Bot\"\r\n                      className=\"w-6 h-6 rounded-full mr-2\"\r\n                    />\r\n                    <span className=\"text-black bg-gray-300 rounded-md pr-4 p-2\">\r\n                      {msg.text}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n                {msg.type === \"user\" && (\r\n                  <div className=\"flex flex-col items-end\">\r\n                    <span className=\"text-gray-600 text-sm mb-1\">You</span>\r\n                    <span className=\"bg-gray-300 pr-4 p-2 rounded-md text-black\">\r\n                      {msg.text}\r\n                    </span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            ))}\r\n            {isBotTyping && (\r\n              <div className=\"text-gray-600\">Bot is typing...</div>\r\n            )}\r\n            <div ref={messagesEndRef}></div>\r\n            {suggest.length > 0 && (\r\n              <>\r\n                <div className=\"flex overflow-y-auto\">\r\n                  <img\r\n                    src={brandImage}\r\n                    alt=\"Bot\"\r\n                    className=\"w-6 h-6 rounded-full mr-2\"\r\n                  />\r\n                  <div className=\"bg-gray-300 p-2 rounded-lg\">\r\n                    <div className=\"mt-2\">Here are Some Suggestions</div>\r\n                    {suggest.map((suggestion, index) => (\r\n                      <div className=\"flex items-center mt-2\" key={index}>\r\n                        <button\r\n                          className=\"chatbot-suggestion-label bg-white hover:bg-gray-500 text-black rounded-md px-2 py-1\"\r\n                          onClick={() => handleSuggestionClick(suggestion)}\r\n                        >\r\n                          {suggestion}\r\n                        </button>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </>\r\n            )}\r\n          </div>\r\n          <div className=\"flex space-x-2\">\r\n            <input\r\n              ref={inputRef}\r\n              type=\"text\"\r\n              value={inputValue}\r\n              onChange={(e) => setInputValue(e.target.value)}\r\n              onKeyPress={handleEnterPress}\r\n              className=\"flex-1 p-2 border rounded-md\"\r\n            />\r\n            <button\r\n              onClick={sendMessage}\r\n              disabled={isBotTyping || rateLimited}\r\n              className=\"px-1 py-1 bg-blue-500 hover:bg-blue-600 active:bg-blue-700 text-white rounded-md\"\r\n            >\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                viewBox=\"0 0 24 24\"\r\n                height=\"30px\"\r\n                width=\"30px\"\r\n              >\r\n                <path\r\n                  fill=\"#d7d7d7\"\r\n                  d=\"M22,11.7V12h-0.1c-0.1,1-17.7,9.5-18.8,9.1c-1.1-0.4,2.4-6.7,3-7.5C6.8,12.9,17.1,12,17.1,12H17c0,0,0-0.2,0-0.2c0,0,0,0,0,0c0-0.4-10.2-1-10.8-1.7c-0.6-0.7-4-7.1-3-7.5C4.3,2.1,22,10.5,22,11.7z\"\r\n                ></path>\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div\r\n          onClick={() => setIsOpen(true)}\r\n          className=\"w-16 h-16 bg-white rounded-full flex items-center justify-center cursor-pointer shadow-lg\"\r\n        >\r\n          <img\r\n            src={brandImage}\r\n            alt=\"Chat Icon\"\r\n            className=\"w-full h-full rounded-full object-cover\"\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatBotComponent;\r\n","C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\trychatbot\\Docs\\DocsModal.tsx",[],[],"C:\\Users\\Apurv Krishn Jha\\Desktop\\CHTBTY\\chatbot-frnt\\src\\app\\trychatbot\\page.tsx",[],[],{"ruleId":"116","severity":1,"message":"117","line":54,"column":6,"nodeType":"118","endLine":54,"endColumn":8,"suggestions":"119"},{"ruleId":"116","severity":1,"message":"120","line":55,"column":6,"nodeType":"118","endLine":55,"endColumn":14,"suggestions":"121"},{"ruleId":"116","severity":1,"message":"122","line":66,"column":6,"nodeType":"118","endLine":66,"endColumn":14,"suggestions":"123"},{"ruleId":"124","severity":1,"message":"125","line":128,"column":15,"nodeType":"126","endLine":132,"endColumn":17},{"ruleId":"124","severity":1,"message":"125","line":148,"column":21,"nodeType":"126","endLine":152,"endColumn":23},{"ruleId":"124","severity":1,"message":"125","line":175,"column":19,"nodeType":"126","endLine":179,"endColumn":21},{"ruleId":"124","severity":1,"message":"125","line":230,"column":11,"nodeType":"126","endLine":234,"endColumn":13},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'UserId'. Either include it or remove the dependency array.","ArrayExpression",["127"],"React Hook useEffect has a missing dependency: 'value'. Either include it or remove the dependency array.",["128"],"React Hook useEffect has a missing dependency: 'valueAi'. Either include it or remove the dependency array.",["129"],"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},"Update the dependencies array to be: [UserId]",{"range":"136","text":"137"},"Update the dependencies array to be: [UserId, value]",{"range":"138","text":"139"},"Update the dependencies array to be: [UserId, valueAi]",{"range":"140","text":"141"},[1575,1577],"[UserId]",[1359,1367],"[UserId, value]",[1588,1596],"[UserId, valueAi]"]